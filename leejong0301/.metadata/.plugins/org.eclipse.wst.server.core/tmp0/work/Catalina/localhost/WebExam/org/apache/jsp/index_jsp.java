/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-03-01 13:38:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.BranchDto;
import model.QnaSearchDto;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.BranchDto");
    _jspx_imports_classes.add("model.QnaSearchDto");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	
	String logid = (String) session.getAttribute("id");

	//2020_01_02 수정부분
	String url = request.getServletPath();
	session.setAttribute("url", url);
	String includeurl = "index_header.jsp";
	String uss = (String) session.getAttribute("id");
	String log = "로그인";
	if (uss == null)
		uss = "GUEST";
	else {
		log = "로그아웃";
		includeurl = "index_header_login.jsp";
	}
	//수정부분 끝

      out.write("\r\n");
      out.write("\r\n");

	ArrayList<BranchDto> BranchList = (ArrayList<BranchDto>)request.getAttribute("BranchList");

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function loginajax() {\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:\"post\",\r\n");
      out.write("\turl:\"./login.do?command=loginbutton\",       \r\n");
      out.write("\tdata:{\r\n");
      out.write("\r\n");
      out.write("\t\tusername:$('#username').val(),\r\n");
      out.write("\t\tpassword:$('#password').val()\r\n");
      out.write("\t},\t\r\n");
      out.write("\tsuccess:whenSuccesslogin,\r\n");
      out.write("\terror:whenErrorlogin\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("function whenSuccesslogin(resdata){\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#LoginAjax\").html(resdata);\r\n");
      out.write("\t\r\n");
      out.write("\tif(resdata.includes(\"ok\")){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlocation.reload();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\telse{\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("function whenErrorlogin(){\r\n");
      out.write("\talert(\"Error\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<script>console.log(\"index.jsp\");</script>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/basicStyle.css\" media=\"screen\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/style2.css\" media=\"screen\">\r\n");
      out.write("<link href=\"css/front.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/borderRightLeft.css\" media=\"screen\">\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n");
      out.write("<!-- 부가적인 테마 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css\">\r\n");
      out.write("<script type='text/javascript'>\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t$('#forgot_username_link').tipsy({\r\n");
      out.write("\t\t\tgravity : 'w'\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("<link href=\"css/front.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<script src=\"js/jquery2.js\" type=\"text/javascript\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\r\n");
      out.write("\t\t$(\".signin\").click(function(e) {\r\n");
      out.write("\t\t\te.preventDefault();\r\n");
      out.write("\t\t\t$(\"fieldset#signin_menu\").toggle();\r\n");
      out.write("\t\t\t$(\".signin\").toggleClass(\"menu-open\");\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"fieldset#signin_menu\").mouseup(function() {\r\n");
      out.write("\t\t\treturn false\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$(document).mouseup(function(e) {\r\n");
      out.write("\t\t\tif ($(e.target).parent(\"a.signin\").length == 0) {\r\n");
      out.write("\t\t\t\t$(\".signin\").removeClass(\"menu-open\");\r\n");
      out.write("\t\t\t\t$(\"fieldset#signin_menu\").hide();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("body{\r\n");
      out.write("\tmargin:0;\r\n");
      out.write("\tpadding:0;\r\n");
      out.write("\twidth:100%;\r\n");
      out.write("\theight:100%;\r\n");
      out.write("}\r\n");
      out.write("#header {\r\n");
      out.write("\theight: auto;\r\n");
      out.write("}\r\n");
      out.write("#navtop {\r\n");
      out.write("    background-color: #363636;\r\n");
      out.write("    top:0;\r\n");
      out.write("}\r\n");
      out.write("#navtop_logo {\r\n");
      out.write("    top: 3px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".wrap {position: absolute;left: 3px;bottom: 43px;width: 288px;height: 132px;margin-left: -144px;text-align: left;overflow: hidden;font-size: 12px;font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;line-height: 1.5;}\r\n");
      out.write(".wrap * {padding: 0;margin: 0;}\r\n");
      out.write(".wrap .info {width: 286px;height: 120px;border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;overflow: hidden;background: #fff;}\r\n");
      out.write(".wrap .info:nth-child(1) {border: 0;box-shadow: 0px 1px 2px #888;}\r\n");
      out.write(".info .title {padding: 5px 0 0 10px;height: 30px;background: #eee;border-bottom: 1px solid #ddd;font-size: 18px;font-weight: bold;}\r\n");
      out.write(".close {position: absolute;top: -168px;right: -138px;color: #888;width: 17px;height: 17px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');}\r\n");
      out.write(".close:hover {cursor: pointer;}\r\n");
      out.write(".info .body {position: relative;overflow: hidden;}\r\n");
      out.write(".info .desc {position: relative;margin: 13px 0 0 90px;height: 75px;}\r\n");
      out.write(".desc .ellipsis {overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\r\n");
      out.write(".desc .jibun {font-size: 11px;color: #888;margin-top: -2px;}\r\n");
      out.write(".info .img {position: absolute;top: 6px;left: 5px;width: 73px;height: 71px;border: 1px solid #ddd;color: #888;overflow: hidden;}\r\n");
      out.write(".info:after {content: '';position: absolute;margin-left: -12px;left: 50%;bottom: 0;width: 22px;height: 12px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\r\n");
      out.write(".info .link {color: #5085BB;}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".custom_zoomcontrol {position:absolute;top:150px;right:10px;width:36px;height:80px;overflow:hidden;z-index:1;background-color:#f5f5f5;-webkit-box-sizing: unset;box-sizing: unset;} \r\n");
      out.write(".custom_zoomcontrol span {display:block;width:36px;height:40px;text-align:center;cursor:pointer;}     \r\n");
      out.write(".custom_zoomcontrol span img {width:15px;height:15px;padding:12px 0;border:none;-webkit-box-sizing: unset;box-sizing: unset;}             \r\n");
      out.write(".custom_zoomcontrol span:first-child{border-bottom:1px solid #bfbfbf;}\r\n");
      out.write(".radius_border{border:1px solid #919191;border-radius:5px;}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}\r\n");
      out.write("\r\n");
      out.write("#menu_wrap {background: rgba(255, 255, 255, 0.92);position:absolute;top:61px;left:0;bottom:0;width:348px;margin:10px 0 30px 10px;padding:5px;overflow-y:auto;z-index: 1;font-size:12px;border-radius: 10px;}\r\n");
      out.write(".bg_white {background:#fff;}\r\n");
      out.write("#menu_wrap hr {display: block; height: 1px;border: 0; border-top: 2px solid #5F5F5F;margin:3px 0;}\r\n");
      out.write("#menu_wrap .option{text-align: center;}\r\n");
      out.write("#menu_wrap .option p {margin:10px 0;}  \r\n");
      out.write("#menu_wrap .option button {margin-left:5px;}\r\n");
      out.write("#placesList li {list-style: none;}\r\n");
      out.write("#placesList .item {position:relative;border-bottom:1px solid #888;overflow: hidden;cursor: pointer;min-height: 65px;}\r\n");
      out.write("#placesList .item span {display: block;margin-top:4px;}\r\n");
      out.write("#placesList .item h5, #placesList .item .info2 {text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\r\n");
      out.write("#placesList .item .info2{padding:10px 0 10px 55px;}\r\n");
      out.write("#placesList .info2 .gray {color:#8a8a8a;}\r\n");
      out.write("#placesList .info2 .jibun {padding-left:26px;background:url(http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;}\r\n");
      out.write("#placesList .info2 .tel {color:#009900;}\r\n");
      out.write("#placesList .item .markerbg {float:left;position:absolute;width:36px; height:50px;margin:10px 0 0 10px;background:url(img/markup.png) no-repeat;}\r\n");
      out.write("\r\n");
      out.write("#pagination {margin:10px auto;text-align: center;}\r\n");
      out.write("#pagination a {display:inline-block;margin-right:10px;}\r\n");
      out.write("#pagination .on {font-weight: bold; cursor: default;color:#777;}\r\n");
      out.write("\r\n");
      out.write("::-webkit-scrollbar{width: 16px;}\r\n");
      out.write("\r\n");
      out.write("::-webkit-scrollbar-thumb {background-color:#003f71;border-radius: 10px;}\r\n");
      out.write("\r\n");
      out.write("::-webkit-scrollbar-button:start:decrement,::-webkit-scrollbar-button:end:increment {\r\n");
      out.write("width:16px;height:16px;background:#003f71;} \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#placesList {\r\n");
      out.write("\tpadding:0;\r\n");
      out.write("}\r\n");
      out.write("#logologo{\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("    z-index: 1;\r\n");
      out.write("    top: 68px;\r\n");
      out.write("    left: 363px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!------------------------------------------------------------------->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, includeurl, out, false);
      out.write("\r\n");
      out.write("\t</header>\r\n");
      out.write("\t<div class=\"map_wrap\">\r\n");
      out.write("\t\t<div id=\"map\" style=\"width:100%;height:100%;\"></div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("\t\r\n");
      out.write("\t        <ul id=\"placesList\">\r\n");
      out.write("\t        \r\n");
      out.write("\t        ");
for(int i=0; i<BranchList.size(); i++){ 
      out.write("\r\n");
      out.write("\t        <a href=\"javascript:void(0);\" onclick=\"setcenter('");
      out.print(BranchList.get(i).getBranch_location());
      out.write("');\"><li class=\"item\"><span class=\"markerbg marker_");
      out.print(i);
      out.write("\"></span><div class=\"info2\">   <h5>");
      out.print(BranchList.get(i).getBranch_name());
      out.write("</h5>    <span>");
      out.print(BranchList.get(i).getBranch_location());
      out.write("</span>   <span class=\"jibun gray\">경기 성남시 분당구 백현동 580-8</span>  \r\n");
      out.write("\t        <span class=\"tel\">");
      out.print(BranchList.get(i).getBranch_tel());
      out.write("</span></div></li></a>\r\n");
      out.write("\t        ");
} 
      out.write("\r\n");
      out.write("\t        \r\n");
      out.write("\t        </ul>\r\n");
      out.write("\t        <div id=\"pagination\"></div>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t    <div id=\"logologo\">\r\n");
      out.write("\t    \r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"custom_zoomcontrol radius_border\"> \r\n");
      out.write("\t        <span onclick=\"zoomIn()\"><img src=\"img/ico_plus.png\" alt=\"확대\"></span>  \r\n");
      out.write("\t        <span onclick=\"zoomOut()\"><img src=\"img/ico_minus.png\" alt=\"축소\"></span>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=a72b187c29bce7d6ae23e29d39cc3a6a&libraries=services\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div  \r\n");
      out.write("    mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(37.49705, 127.02818), // 지도의 중심좌표\r\n");
      out.write("        level: 9 // 지도의 확대 레벨\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("/* 시작지점 콘솔출력에서 위도경도 얻기\r\n");
      out.write("var geocoder0 = new kakao.maps.services.Geocoder();\r\n");
      out.write("geocoder0.addressSearch(\"서울 강남구 역삼동 858\", function(result, status) {\r\n");
      out.write("    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("        var startlocation = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("        console.log(startlocation);\r\n");
      out.write("    } \r\n");
      out.write("});\r\n");
      out.write("*/\r\n");
      out.write("\r\n");
      out.write("//주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 마커를 표시할 위치와 title 객체 배열입니다 \r\n");
      out.write("var positions = [\r\n");
      out.write("\t\r\n");
      out.write("\t");

	for(int i=0; i<BranchList.size(); i++){
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("    {\r\n");
      out.write("    \tcontent: '<div class=\"wrap\">' + \r\n");
      out.write("\t\t\t     '    <div class=\"info\">' + \r\n");
      out.write("\t\t\t     '        <div class=\"title\">' + \r\n");
      out.write("\t\t\t     '            ");
      out.print(BranchList.get(i).getBranch_name());
      out.write("' + \r\n");
      out.write("\t\t\t     '        </div>' + \r\n");
      out.write("\t\t\t     '        <div class=\"body\">' + \r\n");
      out.write("\t\t\t     '            <div class=\"img\">' +\r\n");
      out.write("\t\t\t     '                <img src=\"http://cfile181.uf.daum.net/image/250649365602043421936D\" width=\"73\" height=\"70\">' +\r\n");
      out.write("\t\t\t     '           </div>' + \r\n");
      out.write("\t\t\t     '            <div class=\"desc\">' + \r\n");
      out.write("\t\t\t     '                <div class=\"ellipsis\">");
      out.print(BranchList.get(i).getBranch_location());
      out.write("</div>' + \r\n");
      out.write("\t\t\t     '                <div class=\"jibun ellipsis\">Tel: ");
      out.print(BranchList.get(i).getBranch_tel());
      out.write("</div>' + \r\n");
      out.write("\t\t\t     '                <div><a href=\"branchlist.do?command=branchdetail&branch_no=");
      out.print(BranchList.get(i).getBranch_no());
      out.write("\" target=\"_blank\" class=\"link\">시설소개</a></div>' + \r\n");
      out.write("\t\t\t     '            </div>' + \r\n");
      out.write("\t\t\t     '        </div>' + \r\n");
      out.write("\t\t\t     '    </div>' +    \r\n");
      out.write("\t\t\t     '</div>' ,\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("        title: '카카오', \r\n");
      out.write("        latlng: new kakao.maps.LatLng(37.55799, 127.08698),\r\n");
      out.write("        addr: '");
      out.print(BranchList.get(i).getBranch_location());
      out.write("'\r\n");
      out.write("    }");
if(i+1<BranchList.size()){
      out.write(",\r\n");
      out.write("    ");

    }
	}
    
      out.write("\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("// 마커 이미지의 이미지 주소입니다\r\n");
      out.write("var imageSrc = \"img/markup.png\"; \r\n");
      out.write("\r\n");
      out.write("positions.forEach(function(element){\r\n");
      out.write("    \r\n");
      out.write("    // 마커 이미지의 이미지 크기 입니다\r\n");
      out.write("    var imageSize = new kakao.maps.Size(35,45); \r\n");
      out.write("    \r\n");
      out.write("    // 마커 이미지를 생성합니다    \r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write(" // 주소로 좌표를 검색합니다\r\n");
      out.write("    geocoder.addressSearch(element.addr, function(result, status) {\r\n");
      out.write("    \tvar coords;\r\n");
      out.write("    \t// 정상적으로 검색이 완료됐으면 \r\n");
      out.write("        if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("           coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("        }\r\n");
      out.write("    \t\r\n");
      out.write("    // 마커를 생성합니다\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("        map: map, // 마커를 표시할 지도\r\n");
      out.write("        position: coords, // 마커를 표시할 위치\r\n");
      out.write("         // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n");
      out.write("        image : markerImage // 마커 이미지 \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    /*\r\n");
      out.write("    \r\n");
      out.write("    var closeBtn = document.createElement('button');\r\n");
      out.write("    closeBtn.innerHTML = '<div>닫기</div>';\r\n");
      out.write("    closeBtn.onclick = function () {\r\n");
      out.write("        overlay.setMap(null);\r\n");
      out.write("    };\r\n");
      out.write("    \r\n");
      out.write("    positions[i].content.appendChild(closeBtn);\r\n");
      out.write("    */\r\n");
      out.write("    var overlay = new kakao.maps.CustomOverlay({\r\n");
      out.write("        position: coords      \r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    var content = document.createElement('div');\r\n");
      out.write("    \r\n");
      out.write("    var info = document.createElement('div');\r\n");
      out.write("    info.innerHTML=element.content;\r\n");
      out.write("    content.appendChild(info);\r\n");
      out.write("    \r\n");
      out.write("    var closeBtn = document.createElement('div');\r\n");
      out.write("    closeBtn.innerHTML='<div class=\"close\" onclick=\"closeOverlay()\" title=\"닫기\"></div>';\r\n");
      out.write("    closeBtn.onclick = function() { overlay.setMap(null); };\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    content.appendChild(closeBtn);\r\n");
      out.write("\r\n");
      out.write("    overlay.setContent(content);\r\n");
      out.write("\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, overlay));\r\n");
      out.write("    \r\n");
      out.write(" \t// 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("    \r\n");
      out.write(" \t/*\r\n");
      out.write(" \tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("        content: element.content // 인포윈도우에 표시할 내용\r\n");
      out.write("    });\r\n");
      out.write(" \t\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, overlay));\r\n");
      out.write("    \r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', makeOutListener(map, marker, overlay));\r\n");
      out.write("    \r\n");
      out.write("    */\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    //kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("    //    overlay.setMap(map);\r\n");
      out.write("    //});\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("//var closemarker = document.getElementByClassName('close');\r\n");
      out.write("//closemarker.onclick=function(){\r\n");
      out.write("//\talert(1);\r\n");
      out.write("//}\r\n");
      out.write("//인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n");
      out.write("function makeOverListener(map, marker, overlay) {\r\n");
      out.write("    return function() {\r\n");
      out.write("    \toverlay.setMap(map);\r\n");
      out.write("    };\r\n");
      out.write("}\r\n");
      out.write("/*\r\n");
      out.write("// 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n");
      out.write("function makeOutListener(map, marker, overlay) {\r\n");
      out.write("    return function() {\r\n");
      out.write("    \toverlay.setMap(null);\r\n");
      out.write("    };\r\n");
      out.write("}\r\n");
      out.write("//커스텀 오버레이를 닫기 위해 호출되는 함수입니다 \r\n");
      out.write("function closeOverlay() {\r\n");
      out.write("        overlay.setMap(null);        \r\n");
      out.write("}\r\n");
      out.write("*/\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다\r\n");
      out.write("function zoomIn() {\r\n");
      out.write("    map.setLevel(map.getLevel() - 1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다\r\n");
      out.write("function zoomOut() {\r\n");
      out.write("    map.setLevel(map.getLevel() + 1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function setcenter(addr){\r\n");
      out.write("\t\r\n");
      out.write("\tvar geocoder2 = new kakao.maps.services.Geocoder();\r\n");
      out.write("\tgeocoder2.addressSearch(addr, function(result, status) {\r\n");
      out.write("\r\n");
      out.write("\t    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("\t     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("\t        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("\t        map.setCenter(coords);\r\n");
      out.write("\t    } \r\n");
      out.write("\t});    \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
